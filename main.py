import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from datetime import datetime, timedelta
import gspread
from oauth2client.service_account import ServiceAccountCredentials

from dotenv import load_dotenv
import os

load_dotenv()
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open("–ó–∞–ø–∏—Å–∏_–í–µ—Ç–ö–ª–∏–Ω–∏–∫–∞").sheet1

user_data = {}

def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üêæ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–∏–π–æ–º"))
    markup.add(KeyboardButton("üìÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å"))
    markup.add(KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –∫–ª—ñ–Ω—ñ–∫—É"))
    markup.add(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"))
    markup.add(KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å"))
    markup.add(KeyboardButton("üêï –ü–æ—Å–ª—É–≥–∏ / –¶—ñ–Ω–∏"))
    return markup

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –¥–æ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ üêæ", reply_markup=main_menu())

@bot.message_handler(commands=['cancel'])
def cancel_handler(message):
    user_data.pop(message.chat.id, None)
    bot.send_message(message.chat.id, "–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
def cancel_record(message):
    chat_id = str(message.chat.id)
    records = sheet.get_all_records()
    found = False

    for i, record in enumerate(records, start=2):
        if str(record.get("ChatID")) == chat_id:
            sheet.delete_rows(i)
            found = True
            break

    if found:
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à –∑–∞–ø–∏—Å –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—É. –©–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üêæ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–∏–π–æ–º¬ª.", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "üêæ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–∏–π–æ–º")
def choose_animal(message):
    chat_id = str(message.chat.id)
    records = sheet.get_all_records()
    already_booked = any(str(row.get("ChatID")) == chat_id for row in records)

    if already_booked:
        bot.send_message(
            message.chat.id,
            "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –¥—ñ–π—Å–Ω–∏–π –∑–∞–ø–∏—Å.\n\n"
            "–©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–∏–π, —Å–ø–æ—á–∞—Ç–∫—É —Å–∫–∞—Å—É–π—Ç–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Å, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å.",
            reply_markup=main_menu()
        )
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for animal in ["üê∂ –°–æ–±–∞–∫–∞", "üê± –ö—ñ—Ç", "üê¶ –ü–∞–ø—É–≥–∞", "üêπ –•–æ–º‚Äô—è–∫", "üêæ –Ü–Ω—à–µ"]:
        markup.add(KeyboardButton(animal))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–≤–∞—Ä–∏–Ω—É:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["üê∂ –°–æ–±–∞–∫–∞", "üê± –ö—ñ—Ç", "üê¶ –ü–∞–ø—É–≥–∞", "üêπ –•–æ–º‚Äô—è–∫", "üêæ –Ü–Ω—à–µ"])
def get_owner_name_step(message):
    user_data[message.chat.id] = {"animal": message.text}
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –≤–ª–∞—Å–Ω–∏–∫–∞:", reply_markup=ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: message.chat.id in user_data and "owner" not in user_data[message.chat.id])
def get_pet_name_step(message):
    user_data[message.chat.id]["owner"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∫–ª–∏—á–∫—É —Ç–≤–∞—Ä–∏–Ω–∏:")

@bot.message_handler(func=lambda message: message.chat.id in user_data and "pet_name" not in user_data[message.chat.id])
def get_breed_name_step(message):
    user_data[message.chat.id]["pet_name"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ä–æ–¥—É —Ç–≤–∞—Ä–∏–Ω–∏ (—è–∫—â–æ –Ω–µ–º–∞—î ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞—î'):")    

@bot.message_handler(func=lambda message: message.chat.id in user_data and "breed" not in user_data[message.chat.id])
def get_description_step(message):
    user_data[message.chat.id]["breed"] = message.text
    bot.send_message(message.chat.id, "–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –ø—Ä–∏—á–∏–Ω—É –≤—ñ–∑–∏—Ç—É:")

@bot.message_handler(func=lambda message: message.chat.id in user_data and "description" not in user_data[message.chat.id])
def get_record_date_step(message):
    user_data[message.chat.id]["description"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥–∞—Ç—É –ø—Ä–∏–π–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 12.04.2025):")

@bot.message_handler(func=lambda message: message.chat.id in user_data and "Record_data" not in user_data[message.chat.id])
def get_record_time_step(message):
    user_data[message.chat.id]["Record_data"] = message.text
    available = get_available_slots(user_data[message.chat.id]["Record_data"])

    if not available:
        bot.send_message(message.chat.id, "‚ùå –ù–∞ —Ü—é –¥–∞—Ç—É –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_menu())
        user_data.pop(message.chat.id)
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for time in available:
        markup.add(KeyboardButton(time))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–¥–∏–Ω:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.chat.id in user_data and "Record_time" not in user_data[message.chat.id])
def save_appointment(message):
    chat_id = message.chat.id
    user_data[chat_id]["Record_time"] = message.text

    now = datetime.now()
    user_data[chat_id]["date_made"] = now.strftime("%Y-%m-%d")
    user_data[chat_id]["time_made"] = now.strftime("%H:%M:%S")

    sheet.append_row([
        str(chat_id),
        user_data[chat_id].get("owner", ""),
        user_data[chat_id].get("breed", ""),
        user_data[chat_id].get("pet_name", ""),
        user_data[chat_id].get("animal", ""),
        user_data[chat_id].get("description", ""),
        user_data[chat_id].get("date_made", ""),
        user_data[chat_id].get("time_made", ""),
        user_data[chat_id].get("Record_data", ""),
        user_data[chat_id].get("Record_time", "")
    ])

    bot.send_message(chat_id, "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ –ø—Ä–∏–π–æ–º! –ó –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", reply_markup=main_menu())
    user_data.pop(chat_id)

def generate_time_slots(start_time, end_time, interval_minutes=30):
    slots = []
    current = datetime.strptime(start_time, "%H:%M")
    end = datetime.strptime(end_time, "%H:%M")
    while current < end:
        slots.append(current.strftime("%H:%M"))
        current += timedelta(minutes=interval_minutes)
    return slots

def get_booked_times(date_str):
    records = sheet.get_all_records()
    return [r["–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è"] for r in records if r["–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞"] == date_str]

def get_available_slots(date_str):
    try:
        date_obj = datetime.strptime(date_str, "%d.%m.%Y")
    except ValueError:
        return []
    weekday = date_obj.weekday()
    slots = generate_time_slots("08:30", "18:00") if weekday < 5 else generate_time_slots("08:30", "17:00")
    booked = get_booked_times(date_str)
    return [s for s in slots if s not in booked]

@bot.message_handler(func=lambda message: message.text == "üìÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å")
def these_records(message):
    chat_id = str(message.chat.id)

    try:
        records = sheet.get_all_records()
        user_rows = [row for row in records if str(row.get("ChatID")) == chat_id]

        if user_rows:
            row = user_rows[-1]
            response = (
                f"üóì –í–∞—à –∑–∞–ø–∏—Å:\n"
                f"üë§ –í–ª–∞—Å–Ω–∏–∫: {row.get('–§–ò–û', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                f"üêæ –¢–≤–∞—Ä–∏–Ω–∞: {row.get('–ñ–∏–≤–æ—Ç–Ω–æ–µ', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')} "
                f"({row.get('–ö–ª–∏—á–∫–∞', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}, {row.get('–ü–æ—Ä–æ–¥–∞', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')})\n"
                f"üìã –ü—Ä–æ–±–ª–µ–º–∞: {row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìÖ –ë–∞–∂–∞–Ω–∞ –¥–∞—Ç–∞: {row.get('–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                f"üïí –ë–∞–∂–∞–Ω–∏–π —á–∞—Å: {row.get('–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}"
            )
        else:
            response = "‚ùå –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤. –©–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üêæ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–∏–π–æ–º'."

        bot.send_message(chat_id, response, reply_markup=main_menu())

    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü—Ä–æ –∫–ª—ñ–Ω—ñ–∫—É")
def clinic_info(message):
    bot.send_message(message.chat.id, 
        "üêæ *–ù–∞–∑–≤–∞ –∫–ª—ñ–Ω—ñ–∫–∏* ‚Äî —Å—É—á–∞—Å–Ω–∞ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞ –∫–ª—ñ–Ω—ñ–∫–∞ —É –º—ñ—Å—Ç—ñ...\n\n"
        "üìç *–ê–¥—Ä–µ—Å–∞:* –∞–¥—Ä–µ—Å–∞\n"
        "üïí *–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏:*\n"
        "–ü–Ω‚Äì–ü—Ç: 08:30‚Äì18:00\n"
        "–°–±‚Äì–ù–¥: 08:30‚Äì17:00",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def contact_info(message):
    bot.send_message(message.chat.id, 
        "üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
        "üì∏ *Instagram:* [–∞–∫–∞—É–Ω—Ç](–ø–æ—Å–∏–ª–∞–Ω–Ω—è)\n"
        "üìò *Facebook:* [–∞–∫–∞—É–Ω—Ç](–ø–æ—Å–∏–ª–∞–Ω–Ω—è)",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "üêï –ü–æ—Å–ª—É–≥–∏ / –¶—ñ–Ω–∏")
def services_info(message):
     bot.send_message(message.chat.id, 
        "üíâ *–ü–æ—Å–ª—É–≥–∏:*\n"
        "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó\n‚Ä¢ –í–∞–∫—Ü–∏–Ω–∞—Ü—ñ—è\n‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∏\n‚Ä¢ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n‚Ä¢ –•—ñ—Ä—É—Ä–≥—ñ—è\n‚Ä¢ –°—Ç—Ä–∏–∂–∫–∞ –∫–æ—Ç—ñ–≤ —Ç–æ—â–æ",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

bot.polling()
